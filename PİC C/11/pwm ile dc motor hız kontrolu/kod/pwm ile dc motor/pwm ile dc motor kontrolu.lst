CCS PCM C Compiler, Version 4.068, 61971               05-May-12 05:16

               Filename: C:\Users\rclk\Desktop\pwm ile dc motor\pwm ile dc motor kontrolu.lst

               ROM used: 437 words (5%)
                         Largest free fragment is 2048
               RAM used: 8 (2%) at main() level
                         20 (5%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   13F
0003:  NOP
.................... //recepcelikkaya.com 
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
.................... #fuses xt,nowrt,nowdt,nodebug,nobrownout,nolvp,nocpd,noput,noprotect 
.................... #use delay(clock=4M) 
*
0037:  MOVLW  25
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04B
003D:  MOVLW  01
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  4A
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  GOTO   049
0049:  DECFSZ 00,F
004A:  GOTO   03D
004B:  RETLW  00
.................... #use fast_io(e) 
.................... #use fast_io(c) 
.................... #use fast_io(b) 
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0059:  MOVLW  F0
005A:  BSF    03.5
005B:  MOVWF  06
....................       lcd.rw = 1; 
005C:  BCF    03.5
005D:  BSF    06.2
....................       delay_cycles(1); 
005E:  NOP
....................       lcd.enable = 1; 
005F:  BSF    06.0
....................       delay_cycles(1); 
0060:  NOP
....................       high = lcd.data; 
0061:  MOVF   06,W
0062:  SWAPF  06,W
0063:  ANDLW  0F
0064:  MOVWF  2C
....................       lcd.enable = 0; 
0065:  BCF    06.0
....................       delay_cycles(1); 
0066:  NOP
....................       lcd.enable = 1; 
0067:  BSF    06.0
....................       delay_us(1); 
0068:  NOP
....................       low = lcd.data; 
0069:  MOVF   06,W
006A:  SWAPF  06,W
006B:  ANDLW  0F
006C:  MOVWF  2B
....................       lcd.enable = 0; 
006D:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
006E:  MOVLW  00
006F:  BSF    03.5
0070:  MOVWF  06
....................       return( (high<<4) | low); 
0071:  BCF    03.5
0072:  SWAPF  2C,W
0073:  MOVWF  77
0074:  MOVLW  F0
0075:  ANDWF  77,F
0076:  MOVF   77,W
0077:  IORWF  2B,W
0078:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
004C:  SWAPF  2C,W
004D:  ANDLW  F0
004E:  MOVWF  77
004F:  MOVLW  0F
0050:  ANDWF  06,W
0051:  IORWF  77,W
0052:  MOVWF  06
....................       delay_cycles(1); 
0053:  NOP
....................       lcd.enable = 1; 
0054:  BSF    06.0
....................       delay_us(2); 
0055:  GOTO   056
....................       lcd.enable = 0; 
0056:  BCF    06.0
.................... } 
0057:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0058:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0079:  MOVF   78,W
007A:  MOVWF  2B
007B:  BTFSC  2B.7
007C:  GOTO   059
....................       lcd.rs = address; 
007D:  BTFSS  29.0
007E:  BCF    06.1
007F:  BTFSC  29.0
0080:  BSF    06.1
....................       delay_cycles(1); 
0081:  NOP
....................       lcd.rw = 0; 
0082:  BCF    06.2
....................       delay_cycles(1); 
0083:  NOP
....................       lcd.enable = 0; 
0084:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0085:  SWAPF  2A,W
0086:  MOVWF  2B
0087:  MOVLW  0F
0088:  ANDWF  2B,F
0089:  MOVF   2B,W
008A:  MOVWF  2C
008B:  CALL   04C
....................       lcd_send_nibble(n & 0xf); 
008C:  MOVF   2A,W
008D:  ANDLW  0F
008E:  MOVWF  2B
008F:  MOVWF  2C
0090:  CALL   04C
.................... } 
0091:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0092:  MOVLW  00
0093:  BSF    03.5
0094:  MOVWF  06
....................     lcd.rs = 0; 
0095:  BCF    03.5
0096:  BCF    06.1
....................     lcd.rw = 0; 
0097:  BCF    06.2
....................     lcd.enable = 0; 
0098:  BCF    06.0
....................     delay_ms(15); 
0099:  MOVLW  0F
009A:  MOVWF  25
009B:  CALL   037
....................     for(i=1;i<=3;++i) { 
009C:  MOVLW  01
009D:  MOVWF  21
009E:  MOVF   21,W
009F:  SUBLW  03
00A0:  BTFSS  03.0
00A1:  GOTO   0AA
....................        lcd_send_nibble(3); 
00A2:  MOVLW  03
00A3:  MOVWF  2C
00A4:  CALL   04C
....................        delay_ms(5); 
00A5:  MOVLW  05
00A6:  MOVWF  25
00A7:  CALL   037
....................     } 
00A8:  INCF   21,F
00A9:  GOTO   09E
....................     lcd_send_nibble(2); 
00AA:  MOVLW  02
00AB:  MOVWF  2C
00AC:  CALL   04C
....................     for(i=0;i<=3;++i) 
00AD:  CLRF   21
00AE:  MOVF   21,W
00AF:  SUBLW  03
00B0:  BTFSS  03.0
00B1:  GOTO   0BB
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B2:  MOVF   21,W
00B3:  CALL   004
00B4:  MOVWF  22
00B5:  CLRF   29
00B6:  MOVF   22,W
00B7:  MOVWF  2A
00B8:  CALL   058
00B9:  INCF   21,F
00BA:  GOTO   0AE
.................... } 
00BB:  BCF    0A.3
00BC:  BCF    0A.4
00BD:  GOTO   179 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00D5:  DECFSZ 26,W
00D6:  GOTO   0D8
00D7:  GOTO   0DB
....................      address=lcd_line_two; 
00D8:  MOVLW  40
00D9:  MOVWF  27
....................    else 
00DA:  GOTO   0DC
....................      address=0; 
00DB:  CLRF   27
....................    address+=x-1; 
00DC:  MOVLW  01
00DD:  SUBWF  25,W
00DE:  ADDWF  27,F
....................    lcd_send_byte(0,0x80|address); 
00DF:  MOVF   27,W
00E0:  IORLW  80
00E1:  MOVWF  28
00E2:  CLRF   29
00E3:  MOVF   28,W
00E4:  MOVWF  2A
00E5:  CALL   058
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00BE:  MOVF   24,W
00BF:  XORLW  0C
00C0:  BTFSC  03.2
00C1:  GOTO   0C9
00C2:  XORLW  06
00C3:  BTFSC  03.2
00C4:  GOTO   0D1
00C5:  XORLW  02
00C6:  BTFSC  03.2
00C7:  GOTO   0E7
00C8:  GOTO   0EC
....................      case '\f'   : lcd_send_byte(0,1); 
00C9:  CLRF   29
00CA:  MOVLW  01
00CB:  MOVWF  2A
00CC:  CALL   058
....................                    delay_ms(2); 
00CD:  MOVLW  02
00CE:  MOVWF  25
00CF:  CALL   037
....................                                            break; 
00D0:  GOTO   0F2
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00D1:  MOVLW  01
00D2:  MOVWF  25
00D3:  MOVLW  02
00D4:  MOVWF  26
*
00E6:  GOTO   0F2
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00E7:  CLRF   29
00E8:  MOVLW  10
00E9:  MOVWF  2A
00EA:  CALL   058
00EB:  GOTO   0F2
....................      default     : lcd_send_byte(1,c);     break; 
00EC:  MOVLW  01
00ED:  MOVWF  29
00EE:  MOVF   24,W
00EF:  MOVWF  2A
00F0:  CALL   058
00F1:  GOTO   0F2
....................    } 
.................... } 
00F2:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... unsigned int digital; 
....................  
....................  
.................... void main() 
.................... { 
*
013F:  CLRF   04
0140:  BCF    03.7
0141:  MOVLW  1F
0142:  ANDWF  03,F
0143:  BSF    03.5
0144:  BSF    1F.0
0145:  BSF    1F.1
0146:  BSF    1F.2
0147:  BCF    1F.3
0148:  MOVLW  07
0149:  MOVWF  1C
.................... setup_timer_2(T2_DIV_BY_16,250,1); 
014A:  MOVLW  00
014B:  MOVWF  78
014C:  IORLW  06
014D:  BCF    03.5
014E:  MOVWF  12
014F:  MOVLW  FA
0150:  BSF    03.5
0151:  MOVWF  12
.................... setup_CCP1(CCP_PWM); 
0152:  BCF    03.5
0153:  BCF    07.2
0154:  MOVLW  0C
0155:  MOVWF  17
.................... setup_CCP2(CCP_OFF); 
0156:  CLRF   1D
.................... setup_adc(adc_clock_div_2); 
0157:  BSF    03.5
0158:  BCF    1F.6
0159:  BCF    03.5
015A:  BCF    1F.6
015B:  BCF    1F.7
015C:  BSF    03.5
015D:  BCF    1F.7
015E:  BCF    03.5
015F:  BSF    1F.0
.................... setup_adc_ports(ALL_ANALOG); 
0160:  BSF    03.5
0161:  BCF    1F.0
0162:  BCF    1F.1
0163:  BCF    1F.2
0164:  BCF    1F.3
....................  
.................... set_tris_c(0x00); 
0165:  MOVLW  00
0166:  MOVWF  07
.................... set_tris_e(0xFF); 
0167:  BSF    09.0
0168:  BSF    09.1
0169:  BSF    09.2
.................... set_tris_b(0x00); 
016A:  MOVWF  06
.................... output_c(0x00); 
016B:  BCF    03.5
016C:  CLRF   07
....................  
.................... set_adc_channel(5); //an5  
016D:  MOVLW  28
016E:  MOVWF  78
016F:  MOVF   1F,W
0170:  ANDLW  C7
0171:  IORWF  78,W
0172:  MOVWF  1F
.................... delay_us(20); 
0173:  MOVLW  06
0174:  MOVWF  77
0175:  DECFSZ 77,F
0176:  GOTO   175
0177:  NOP
....................  
.................... lcd_init(); 
0178:  GOTO   092
.................... printf(lcd_putc,"\fpwm ile dc \n kontrolu"); 
0179:  CLRF   21
017A:  MOVF   21,W
017B:  CALL   00C
017C:  INCF   21,F
017D:  MOVWF  77
017E:  MOVWF  24
017F:  CALL   0BE
0180:  MOVLW  16
0181:  SUBWF  21,W
0182:  BTFSS  03.2
0183:  GOTO   17A
.................... delay_ms(1000); 
0184:  MOVLW  04
0185:  MOVWF  21
0186:  MOVLW  FA
0187:  MOVWF  25
0188:  CALL   037
0189:  DECFSZ 21,F
018A:  GOTO   186
....................  
.................... set_pwm1_duty(0); 
018B:  CLRF   15
....................  
.................... while(1) 
.................... { 
.................... digital=read_adc(); 
018C:  BSF    1F.2
018D:  BTFSC  1F.2
018E:  GOTO   18D
018F:  MOVF   1E,W
0190:  MOVWF  20
.................... delay_us(20); 
0191:  MOVLW  06
0192:  MOVWF  77
0193:  DECFSZ 77,F
0194:  GOTO   193
0195:  NOP
....................  
.................... output_high(pin_c3); 
0196:  BSF    07.3
.................... output_low(pin_c4); 
0197:  BCF    07.4
....................  
.................... if(digital>250) 
0198:  MOVF   20,W
0199:  SUBLW  FA
019A:  BTFSC  03.0
019B:  GOTO   19E
.................... digital=250; 
019C:  MOVLW  FA
019D:  MOVWF  20
....................  
.................... set_pwm1_duty(digital); 
019E:  MOVF   20,W
019F:  MOVWF  15
....................  
.................... printf(lcd_putc,"\fdigital=%u"digital); 
01A0:  CLRF   21
01A1:  MOVF   21,W
01A2:  CALL   027
01A3:  INCF   21,F
01A4:  MOVWF  77
01A5:  MOVWF  24
01A6:  CALL   0BE
01A7:  MOVLW  09
01A8:  SUBWF  21,W
01A9:  BTFSS  03.2
01AA:  GOTO   1A1
01AB:  MOVF   20,W
01AC:  MOVWF  22
01AD:  MOVLW  1B
01AE:  MOVWF  23
01AF:  GOTO   108
.................... delay_ms(50); 
01B0:  MOVLW  32
01B1:  MOVWF  25
01B2:  CALL   037
....................  
.................... } 
01B3:  GOTO   18C
....................  
.................... } 
01B4:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
