CCS PCM C Compiler, Version 4.074, 49549               18-Eyl-12 22:30

               Filename: E:\DONANIM_PROJE\PÝC C\9\adc_lcd uyg\kod\adc.lst

               ROM used: 1003 words (12%)
                         Largest free fragment is 2048
               RAM used: 13 (4%) at main() level
                         39 (11%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   33C
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XT,NOLVP,NOBROWNOUT,NOWDT,NOPROTECT,NODEBUG,NOPUT,NOWRT,NOCPD 
.................... #use delay(clock=4000000) 
*
005A:  MOVLW  35
005B:  MOVWF  04
005C:  BCF    03.7
005D:  MOVF   00,W
005E:  BTFSC  03.2
005F:  GOTO   06E
0060:  MOVLW  01
0061:  MOVWF  78
0062:  CLRF   77
0063:  DECFSZ 77,F
0064:  GOTO   063
0065:  DECFSZ 78,F
0066:  GOTO   062
0067:  MOVLW  4A
0068:  MOVWF  77
0069:  DECFSZ 77,F
006A:  GOTO   069
006B:  GOTO   06C
006C:  DECFSZ 00,F
006D:  GOTO   060
006E:  RETLW  00
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
007C:  MOVLW  F0
007D:  BSF    03.5
007E:  MOVWF  06
....................       lcd.rw = 1; 
007F:  BCF    03.5
0080:  BSF    06.2
....................       delay_cycles(1); 
0081:  NOP
....................       lcd.enable = 1; 
0082:  BSF    06.0
....................       delay_cycles(1); 
0083:  NOP
....................       high = lcd.data; 
0084:  MOVF   06,W
0085:  SWAPF  06,W
0086:  ANDLW  0F
0087:  MOVWF  3C
....................       lcd.enable = 0; 
0088:  BCF    06.0
....................       delay_cycles(1); 
0089:  NOP
....................       lcd.enable = 1; 
008A:  BSF    06.0
....................       delay_us(1); 
008B:  NOP
....................       low = lcd.data; 
008C:  MOVF   06,W
008D:  SWAPF  06,W
008E:  ANDLW  0F
008F:  MOVWF  3B
....................       lcd.enable = 0; 
0090:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
0091:  MOVLW  00
0092:  BSF    03.5
0093:  MOVWF  06
....................       return( (high<<4) | low); 
0094:  BCF    03.5
0095:  SWAPF  3C,W
0096:  MOVWF  77
0097:  MOVLW  F0
0098:  ANDWF  77,F
0099:  MOVF   77,W
009A:  IORWF  3B,W
009B:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
006F:  SWAPF  3C,W
0070:  ANDLW  F0
0071:  MOVWF  77
0072:  MOVLW  0F
0073:  ANDWF  06,W
0074:  IORWF  77,W
0075:  MOVWF  06
....................       delay_cycles(1); 
0076:  NOP
....................       lcd.enable = 1; 
0077:  BSF    06.0
....................       delay_us(2); 
0078:  GOTO   079
....................       lcd.enable = 0; 
0079:  BCF    06.0
.................... } 
007A:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
007B:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
009C:  MOVF   78,W
009D:  MOVWF  3B
009E:  BTFSC  3B.7
009F:  GOTO   07C
....................       lcd.rs = address; 
00A0:  BTFSS  39.0
00A1:  BCF    06.1
00A2:  BTFSC  39.0
00A3:  BSF    06.1
....................       delay_cycles(1); 
00A4:  NOP
....................       lcd.rw = 0; 
00A5:  BCF    06.2
....................       delay_cycles(1); 
00A6:  NOP
....................       lcd.enable = 0; 
00A7:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
00A8:  SWAPF  3A,W
00A9:  MOVWF  3B
00AA:  MOVLW  0F
00AB:  ANDWF  3B,F
00AC:  MOVF   3B,W
00AD:  MOVWF  3C
00AE:  CALL   06F
....................       lcd_send_nibble(n & 0xf); 
00AF:  MOVF   3A,W
00B0:  ANDLW  0F
00B1:  MOVWF  3B
00B2:  MOVWF  3C
00B3:  CALL   06F
.................... } 
00B4:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
00B5:  MOVLW  00
00B6:  BSF    03.5
00B7:  MOVWF  06
....................     lcd.rs = 0; 
00B8:  BCF    03.5
00B9:  BCF    06.1
....................     lcd.rw = 0; 
00BA:  BCF    06.2
....................     lcd.enable = 0; 
00BB:  BCF    06.0
....................     delay_ms(15); 
00BC:  MOVLW  0F
00BD:  MOVWF  35
00BE:  CALL   05A
....................     for(i=1;i<=3;++i) { 
00BF:  MOVLW  01
00C0:  MOVWF  26
00C1:  MOVF   26,W
00C2:  SUBLW  03
00C3:  BTFSS  03.0
00C4:  GOTO   0CD
....................        lcd_send_nibble(3); 
00C5:  MOVLW  03
00C6:  MOVWF  3C
00C7:  CALL   06F
....................        delay_ms(5); 
00C8:  MOVLW  05
00C9:  MOVWF  35
00CA:  CALL   05A
....................     } 
00CB:  INCF   26,F
00CC:  GOTO   0C1
....................     lcd_send_nibble(2); 
00CD:  MOVLW  02
00CE:  MOVWF  3C
00CF:  CALL   06F
....................     for(i=0;i<=3;++i) 
00D0:  CLRF   26
00D1:  MOVF   26,W
00D2:  SUBLW  03
00D3:  BTFSS  03.0
00D4:  GOTO   0DE
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D5:  MOVF   26,W
00D6:  CALL   004
00D7:  MOVWF  27
00D8:  CLRF   39
00D9:  MOVF   27,W
00DA:  MOVWF  3A
00DB:  CALL   07B
00DC:  INCF   26,F
00DD:  GOTO   0D1
.................... } 
00DE:  BCF    0A.3
00DF:  BCF    0A.4
00E0:  GOTO   35A (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
00E1:  DECFSZ 36,W
00E2:  GOTO   0E4
00E3:  GOTO   0E7
....................      address=lcd_line_two; 
00E4:  MOVLW  40
00E5:  MOVWF  37
....................    else 
00E6:  GOTO   0E8
....................      address=0; 
00E7:  CLRF   37
....................    address+=x-1; 
00E8:  MOVLW  01
00E9:  SUBWF  35,W
00EA:  ADDWF  37,F
....................    lcd_send_byte(0,0x80|address); 
00EB:  MOVF   37,W
00EC:  IORLW  80
00ED:  MOVWF  38
00EE:  CLRF   39
00EF:  MOVF   38,W
00F0:  MOVWF  3A
00F1:  CALL   07B
.................... } 
00F2:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
00F3:  MOVF   34,W
00F4:  XORLW  0C
00F5:  BTFSC  03.2
00F6:  GOTO   0FE
00F7:  XORLW  06
00F8:  BTFSC  03.2
00F9:  GOTO   106
00FA:  XORLW  02
00FB:  BTFSC  03.2
00FC:  GOTO   10C
00FD:  GOTO   111
....................      case '\f'   : lcd_send_byte(0,1); 
00FE:  CLRF   39
00FF:  MOVLW  01
0100:  MOVWF  3A
0101:  CALL   07B
....................                    delay_ms(2); 
0102:  MOVLW  02
0103:  MOVWF  35
0104:  CALL   05A
....................                                            break; 
0105:  GOTO   117
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0106:  MOVLW  01
0107:  MOVWF  35
0108:  MOVLW  02
0109:  MOVWF  36
010A:  CALL   0E1
010B:  GOTO   117
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
010C:  CLRF   39
010D:  MOVLW  10
010E:  MOVWF  3A
010F:  CALL   07B
0110:  GOTO   117
....................      default     : lcd_send_byte(1,c);     break; 
0111:  MOVLW  01
0112:  MOVWF  39
0113:  MOVF   34,W
0114:  MOVWF  3A
0115:  CALL   07B
0116:  GOTO   117
....................    } 
.................... } 
0117:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... unsigned long int dijital; 
.................... float volt; 
....................  
.................... void main() 
.................... { 
*
033C:  CLRF   04
033D:  BCF    03.7
033E:  MOVLW  1F
033F:  ANDWF  03,F
0340:  BSF    03.5
0341:  BSF    1F.0
0342:  BSF    1F.1
0343:  BSF    1F.2
0344:  BCF    1F.3
0345:  MOVLW  07
0346:  MOVWF  1C
.................... set_tris_a(0x01); //0000 0001 
0347:  MOVLW  01
0348:  MOVWF  05
.................... set_tris_b(0x00); 
0349:  MOVLW  00
034A:  MOVWF  06
....................  
.................... setup_adc(adc_clock_div_32); 
034B:  BCF    1F.6
034C:  BCF    03.5
034D:  BCF    1F.6
034E:  BSF    1F.7
034F:  BSF    03.5
0350:  BSF    1F.7
0351:  BCF    03.5
0352:  BSF    1F.0
.................... setup_adc_ports(all_analog); 
0353:  BSF    03.5
0354:  BCF    1F.0
0355:  BCF    1F.1
0356:  BCF    1F.2
0357:  BCF    1F.3
....................  
.................... lcd_init(); 
0358:  BCF    03.5
0359:  GOTO   0B5
.................... printf(lcd_putc," by  hakan ozbek \n"); 
035A:  CLRF   26
035B:  MOVF   26,W
035C:  CALL   00C
035D:  INCF   26,F
035E:  MOVWF  77
035F:  MOVWF  34
0360:  CALL   0F3
0361:  MOVLW  12
0362:  SUBWF  26,W
0363:  BTFSS  03.2
0364:  GOTO   35B
....................  
.................... delay_ms(1000); 
0365:  MOVLW  04
0366:  MOVWF  26
0367:  MOVLW  FA
0368:  MOVWF  35
0369:  CALL   05A
036A:  DECFSZ 26,F
036B:  GOTO   367
.................... printf(lcd_putc,"adc uygulamalari"); 
036C:  CLRF   26
036D:  MOVF   26,W
036E:  CALL   023
036F:  INCF   26,F
0370:  MOVWF  77
0371:  MOVWF  34
0372:  CALL   0F3
0373:  MOVLW  10
0374:  SUBWF  26,W
0375:  BTFSS  03.2
0376:  GOTO   36D
....................  
.................... delay_ms(1000); 
0377:  MOVLW  04
0378:  MOVWF  26
0379:  MOVLW  FA
037A:  MOVWF  35
037B:  CALL   05A
037C:  DECFSZ 26,F
037D:  GOTO   379
....................  
.................... while(1) 
.................... { 
.................... set_adc_channel(0); 
037E:  MOVLW  00
037F:  MOVWF  78
0380:  MOVF   1F,W
0381:  ANDLW  C7
0382:  IORWF  78,W
0383:  MOVWF  1F
.................... delay_us(50); //muhakkak verilmeli 
0384:  MOVLW  10
0385:  MOVWF  77
0386:  DECFSZ 77,F
0387:  GOTO   386
0388:  NOP
....................  
.................... dijital=read_adc(); 
0389:  BSF    1F.2
038A:  BTFSC  1F.2
038B:  GOTO   38A
038C:  BSF    03.5
038D:  MOVF   1E,W
038E:  BCF    03.5
038F:  MOVWF  20
0390:  MOVF   1E,W
0391:  MOVWF  21
.................... volt=0.0048828*dijital; 
0392:  MOVF   21,W
0393:  MOVWF  27
0394:  MOVF   20,W
0395:  MOVWF  26
0396:  GOTO   118
0397:  MOVLW  E5
0398:  MOVWF  37
0399:  MOVLW  FF
039A:  MOVWF  36
039B:  MOVLW  1F
039C:  MOVWF  35
039D:  MOVLW  77
039E:  MOVWF  34
039F:  MOVF   7A,W
03A0:  MOVWF  3B
03A1:  MOVF   79,W
03A2:  MOVWF  3A
03A3:  MOVF   78,W
03A4:  MOVWF  39
03A5:  MOVF   77,W
03A6:  MOVWF  38
03A7:  CALL   137
03A8:  MOVF   7A,W
03A9:  MOVWF  25
03AA:  MOVF   79,W
03AB:  MOVWF  24
03AC:  MOVF   78,W
03AD:  MOVWF  23
03AE:  MOVF   77,W
03AF:  MOVWF  22
....................  
.................... printf(lcd_putc,"\fdijital=%lu",dijital); 
03B0:  CLRF   26
03B1:  MOVF   26,W
03B2:  CALL   038
03B3:  INCF   26,F
03B4:  MOVWF  77
03B5:  MOVWF  34
03B6:  CALL   0F3
03B7:  MOVLW  09
03B8:  SUBWF  26,W
03B9:  BTFSS  03.2
03BA:  GOTO   3B1
03BB:  MOVLW  10
03BC:  MOVWF  04
03BD:  MOVF   21,W
03BE:  MOVWF  28
03BF:  MOVF   20,W
03C0:  MOVWF  27
03C1:  GOTO   1AC
.................... lcd_gotoxy(1,2); 
03C2:  MOVLW  01
03C3:  MOVWF  35
03C4:  MOVLW  02
03C5:  MOVWF  36
03C6:  CALL   0E1
.................... printf(lcd_putc,"analog=%.2fV",volt); 
03C7:  CLRF   26
03C8:  MOVF   26,W
03C9:  CALL   049
03CA:  INCF   26,F
03CB:  MOVWF  77
03CC:  MOVWF  34
03CD:  CALL   0F3
03CE:  MOVLW  07
03CF:  SUBWF  26,W
03D0:  BTFSS  03.2
03D1:  GOTO   3C8
03D2:  MOVLW  89
03D3:  MOVWF  04
03D4:  MOVF   25,W
03D5:  MOVWF  2A
03D6:  MOVF   24,W
03D7:  MOVWF  29
03D8:  MOVF   23,W
03D9:  MOVWF  28
03DA:  MOVF   22,W
03DB:  MOVWF  27
03DC:  MOVLW  02
03DD:  MOVWF  2B
03DE:  GOTO   253
03DF:  MOVLW  56
03E0:  MOVWF  34
03E1:  CALL   0F3
.................... delay_ms(1000); 
03E2:  MOVLW  04
03E3:  MOVWF  26
03E4:  MOVLW  FA
03E5:  MOVWF  35
03E6:  CALL   05A
03E7:  DECFSZ 26,F
03E8:  GOTO   3E4
....................  
....................  
....................  
.................... } 
03E9:  GOTO   37E
.................... } 
03EA:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
