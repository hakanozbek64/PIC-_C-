CCS PCM C Compiler, Version 4.068, 61971               25-Nis-12 21:25

               Filename: C:\Users\rclk\Desktop\Yeni klasör\lm35.lst

               ROM used: 1417 words (17%)
                         Largest free fragment is 2048
               RAM used: 19 (5%) at main() level
                         42 (11%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   4B2
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC=10 
.................... #fuses XT,NOWRT,NOPROTECT,NOWDT,NOLVP,NOCPD,NODEBUG,NOPUT,NOBROWNOUT 
.................... #use delay(clock=4M) 
*
0028:  MOVLW  38
0029:  MOVWF  04
002A:  BCF    03.7
002B:  MOVF   00,W
002C:  BTFSC  03.2
002D:  GOTO   03C
002E:  MOVLW  01
002F:  MOVWF  78
0030:  CLRF   77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  DECFSZ 78,F
0034:  GOTO   030
0035:  MOVLW  4A
0036:  MOVWF  77
0037:  DECFSZ 77,F
0038:  GOTO   037
0039:  GOTO   03A
003A:  DECFSZ 00,F
003B:  GOTO   02E
003C:  RETLW  00
.................... #use fast_io(a) 
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
004A:  MOVLW  F0
004B:  BSF    03.5
004C:  MOVWF  06
....................       lcd.rw = 1; 
004D:  BCF    03.5
004E:  BSF    06.2
....................       delay_cycles(1); 
004F:  NOP
....................       lcd.enable = 1; 
0050:  BSF    06.0
....................       delay_cycles(1); 
0051:  NOP
....................       high = lcd.data; 
0052:  MOVF   06,W
0053:  SWAPF  06,W
0054:  ANDLW  0F
0055:  MOVWF  3F
....................       lcd.enable = 0; 
0056:  BCF    06.0
....................       delay_cycles(1); 
0057:  NOP
....................       lcd.enable = 1; 
0058:  BSF    06.0
....................       delay_us(1); 
0059:  NOP
....................       low = lcd.data; 
005A:  MOVF   06,W
005B:  SWAPF  06,W
005C:  ANDLW  0F
005D:  MOVWF  3E
....................       lcd.enable = 0; 
005E:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
005F:  MOVLW  00
0060:  BSF    03.5
0061:  MOVWF  06
....................       return( (high<<4) | low); 
0062:  BCF    03.5
0063:  SWAPF  3F,W
0064:  MOVWF  77
0065:  MOVLW  F0
0066:  ANDWF  77,F
0067:  MOVF   77,W
0068:  IORWF  3E,W
0069:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
003D:  SWAPF  3F,W
003E:  ANDLW  F0
003F:  MOVWF  77
0040:  MOVLW  0F
0041:  ANDWF  06,W
0042:  IORWF  77,W
0043:  MOVWF  06
....................       delay_cycles(1); 
0044:  NOP
....................       lcd.enable = 1; 
0045:  BSF    06.0
....................       delay_us(2); 
0046:  GOTO   047
....................       lcd.enable = 0; 
0047:  BCF    06.0
.................... } 
0048:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0049:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
006A:  MOVF   78,W
006B:  MOVWF  3E
006C:  BTFSC  3E.7
006D:  GOTO   04A
....................       lcd.rs = address; 
006E:  BTFSS  3C.0
006F:  BCF    06.1
0070:  BTFSC  3C.0
0071:  BSF    06.1
....................       delay_cycles(1); 
0072:  NOP
....................       lcd.rw = 0; 
0073:  BCF    06.2
....................       delay_cycles(1); 
0074:  NOP
....................       lcd.enable = 0; 
0075:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0076:  SWAPF  3D,W
0077:  MOVWF  3E
0078:  MOVLW  0F
0079:  ANDWF  3E,F
007A:  MOVF   3E,W
007B:  MOVWF  3F
007C:  CALL   03D
....................       lcd_send_nibble(n & 0xf); 
007D:  MOVF   3D,W
007E:  ANDLW  0F
007F:  MOVWF  3E
0080:  MOVWF  3F
0081:  CALL   03D
.................... } 
0082:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0083:  MOVLW  00
0084:  BSF    03.5
0085:  MOVWF  06
....................     lcd.rs = 0; 
0086:  BCF    03.5
0087:  BCF    06.1
....................     lcd.rw = 0; 
0088:  BCF    06.2
....................     lcd.enable = 0; 
0089:  BCF    06.0
....................     delay_ms(15); 
008A:  MOVLW  0F
008B:  MOVWF  38
008C:  CALL   028
....................     for(i=1;i<=3;++i) { 
008D:  MOVLW  01
008E:  MOVWF  29
008F:  MOVF   29,W
0090:  SUBLW  03
0091:  BTFSS  03.0
0092:  GOTO   09B
....................        lcd_send_nibble(3); 
0093:  MOVLW  03
0094:  MOVWF  3F
0095:  CALL   03D
....................        delay_ms(5); 
0096:  MOVLW  05
0097:  MOVWF  38
0098:  CALL   028
....................     } 
0099:  INCF   29,F
009A:  GOTO   08F
....................     lcd_send_nibble(2); 
009B:  MOVLW  02
009C:  MOVWF  3F
009D:  CALL   03D
....................     for(i=0;i<=3;++i) 
009E:  CLRF   29
009F:  MOVF   29,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AC
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A3:  MOVF   29,W
00A4:  CALL   004
00A5:  MOVWF  2A
00A6:  CLRF   3C
00A7:  MOVF   2A,W
00A8:  MOVWF  3D
00A9:  CALL   049
00AA:  INCF   29,F
00AB:  GOTO   09F
.................... } 
00AC:  BCF    0A.3
00AD:  BCF    0A.4
00AE:  GOTO   4CE (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
00AF:  DECFSZ 39,W
00B0:  GOTO   0B2
00B1:  GOTO   0B5
....................      address=lcd_line_two; 
00B2:  MOVLW  40
00B3:  MOVWF  3A
....................    else 
00B4:  GOTO   0B6
....................      address=0; 
00B5:  CLRF   3A
....................    address+=x-1; 
00B6:  MOVLW  01
00B7:  SUBWF  38,W
00B8:  ADDWF  3A,F
....................    lcd_send_byte(0,0x80|address); 
00B9:  MOVF   3A,W
00BA:  IORLW  80
00BB:  MOVWF  3B
00BC:  CLRF   3C
00BD:  MOVF   3B,W
00BE:  MOVWF  3D
00BF:  CALL   049
.................... } 
00C0:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
00C1:  MOVF   37,W
00C2:  XORLW  0C
00C3:  BTFSC  03.2
00C4:  GOTO   0CC
00C5:  XORLW  06
00C6:  BTFSC  03.2
00C7:  GOTO   0D4
00C8:  XORLW  02
00C9:  BTFSC  03.2
00CA:  GOTO   0DA
00CB:  GOTO   0DF
....................      case '\f'   : lcd_send_byte(0,1); 
00CC:  CLRF   3C
00CD:  MOVLW  01
00CE:  MOVWF  3D
00CF:  CALL   049
....................                    delay_ms(2); 
00D0:  MOVLW  02
00D1:  MOVWF  38
00D2:  CALL   028
....................                                            break; 
00D3:  GOTO   0E5
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00D4:  MOVLW  01
00D5:  MOVWF  38
00D6:  MOVLW  02
00D7:  MOVWF  39
00D8:  CALL   0AF
00D9:  GOTO   0E5
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00DA:  CLRF   3C
00DB:  MOVLW  10
00DC:  MOVWF  3D
00DD:  CALL   049
00DE:  GOTO   0E5
....................      default     : lcd_send_byte(1,c);     break; 
00DF:  MOVLW  01
00E0:  MOVWF  3C
00E1:  MOVF   37,W
00E2:  MOVWF  3D
00E3:  CALL   049
00E4:  GOTO   0E5
....................    } 
.................... } 
00E5:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... int dijital; 
.................... float sicaklik,Mvolt; 
....................  
.................... void main() 
.................... { 
*
04B2:  CLRF   04
04B3:  BCF    03.7
04B4:  MOVLW  1F
04B5:  ANDWF  03,F
04B6:  BSF    03.5
04B7:  BSF    1F.0
04B8:  BSF    1F.1
04B9:  BSF    1F.2
04BA:  BCF    1F.3
04BB:  MOVLW  07
04BC:  MOVWF  1C
.................... set_tris_a(0x01); //ra0 aktif 
04BD:  MOVLW  01
04BE:  MOVWF  05
.................... setup_adc(adc_clock_div_32); 
04BF:  BCF    1F.6
04C0:  BCF    03.5
04C1:  BCF    1F.6
04C2:  BSF    1F.7
04C3:  BSF    03.5
04C4:  BSF    1F.7
04C5:  BCF    03.5
04C6:  BSF    1F.0
.................... setup_adc_ports(AN0); 
04C7:  BSF    03.5
04C8:  BCF    1F.0
04C9:  BSF    1F.1
04CA:  BSF    1F.2
04CB:  BSF    1F.3
.................... lcd_init(); 
04CC:  BCF    03.5
04CD:  GOTO   083
.................... set_adc_channel(0); 
04CE:  MOVLW  00
04CF:  MOVWF  78
04D0:  MOVF   1F,W
04D1:  ANDLW  C7
04D2:  IORWF  78,W
04D3:  MOVWF  1F
.................... delay_us(50); 
04D4:  MOVLW  10
04D5:  MOVWF  77
04D6:  DECFSZ 77,F
04D7:  GOTO   4D6
04D8:  NOP
.................... printf(lcd_putc,"\fSicaklik="); 
04D9:  CLRF   29
04DA:  MOVF   29,W
04DB:  CALL   00C
04DC:  INCF   29,F
04DD:  MOVWF  77
04DE:  MOVWF  37
04DF:  CALL   0C1
04E0:  MOVLW  0A
04E1:  SUBWF  29,W
04E2:  BTFSS  03.2
04E3:  GOTO   4DA
....................  
.................... while(1) 
.................... { 
.................... dijital=read_adc(); 
04E4:  BSF    1F.2
04E5:  BTFSC  1F.2
04E6:  GOTO   4E5
04E7:  BSF    03.5
04E8:  MOVF   1E,W
04E9:  BCF    03.5
04EA:  MOVWF  20
.................... Mvolt=(0.0048828412*dijital)*1000; 
04EB:  CLRF   2A
04EC:  MOVF   20,W
04ED:  MOVWF  29
04EE:  GOTO   0E6
04EF:  MOVLW  3E
04F0:  MOVWF  3A
04F1:  CLRF   39
04F2:  MOVLW  20
04F3:  MOVWF  38
04F4:  MOVLW  77
04F5:  MOVWF  37
04F6:  MOVF   7A,W
04F7:  MOVWF  3E
04F8:  MOVF   79,W
04F9:  MOVWF  3D
04FA:  MOVF   78,W
04FB:  MOVWF  3C
04FC:  MOVF   77,W
04FD:  MOVWF  3B
04FE:  CALL   105
04FF:  MOVF   77,W
0500:  MOVWF  29
0501:  MOVF   78,W
0502:  MOVWF  2A
0503:  MOVF   79,W
0504:  MOVWF  2B
0505:  MOVF   7A,W
0506:  MOVWF  2C
0507:  MOVWF  3A
0508:  MOVF   79,W
0509:  MOVWF  39
050A:  MOVF   78,W
050B:  MOVWF  38
050C:  MOVF   77,W
050D:  MOVWF  37
050E:  CLRF   3E
050F:  CLRF   3D
0510:  MOVLW  7A
0511:  MOVWF  3C
0512:  MOVLW  88
0513:  MOVWF  3B
0514:  CALL   105
0515:  MOVF   7A,W
0516:  MOVWF  28
0517:  MOVF   79,W
0518:  MOVWF  27
0519:  MOVF   78,W
051A:  MOVWF  26
051B:  MOVF   77,W
051C:  MOVWF  25
.................... sicaklik=(Mvolt/10)+2; 
051D:  MOVF   28,W
051E:  MOVWF  2C
051F:  MOVF   27,W
0520:  MOVWF  2B
0521:  MOVF   26,W
0522:  MOVWF  2A
0523:  MOVF   25,W
0524:  MOVWF  29
0525:  CLRF   30
0526:  CLRF   2F
0527:  MOVLW  20
0528:  MOVWF  2E
0529:  MOVLW  82
052A:  MOVWF  2D
052B:  GOTO   17A
052C:  MOVF   77,W
052D:  MOVWF  29
052E:  MOVF   78,W
052F:  MOVWF  2A
0530:  MOVF   79,W
0531:  MOVWF  2B
0532:  MOVF   7A,W
0533:  MOVWF  2C
0534:  BCF    03.1
0535:  MOVF   7A,W
0536:  MOVWF  30
0537:  MOVF   79,W
0538:  MOVWF  2F
0539:  MOVF   78,W
053A:  MOVWF  2E
053B:  MOVF   77,W
053C:  MOVWF  2D
053D:  CLRF   34
053E:  CLRF   33
053F:  CLRF   32
0540:  MOVLW  80
0541:  MOVWF  31
0542:  GOTO   246
0543:  MOVF   7A,W
0544:  MOVWF  24
0545:  MOVF   79,W
0546:  MOVWF  23
0547:  MOVF   78,W
0548:  MOVWF  22
0549:  MOVF   77,W
054A:  MOVWF  21
....................  
.................... lcd_gotoxy(10,1); 
054B:  MOVLW  0A
054C:  MOVWF  38
054D:  MOVLW  01
054E:  MOVWF  39
054F:  CALL   0AF
.................... printf(lcd_putc,"%f%cC",sicaklik,223); 
0550:  MOVLW  89
0551:  MOVWF  04
0552:  MOVF   24,W
0553:  MOVWF  2D
0554:  MOVF   23,W
0555:  MOVWF  2C
0556:  MOVF   22,W
0557:  MOVWF  2B
0558:  MOVF   21,W
0559:  MOVWF  2A
055A:  MOVLW  02
055B:  MOVWF  2E
055C:  CALL   3CB
055D:  MOVLW  DF
055E:  MOVWF  37
055F:  CALL   0C1
0560:  MOVLW  43
0561:  MOVWF  37
0562:  CALL   0C1
.................... lcd_gotoxy(1,2); 
0563:  MOVLW  01
0564:  MOVWF  38
0565:  MOVLW  02
0566:  MOVWF  39
0567:  CALL   0AF
.................... printf(lcd_putc,"Mvolt=%f",Mvolt); 
0568:  CLRF   29
0569:  MOVF   29,W
056A:  CALL   01B
056B:  INCF   29,F
056C:  MOVWF  77
056D:  MOVWF  37
056E:  CALL   0C1
056F:  MOVLW  06
0570:  SUBWF  29,W
0571:  BTFSS  03.2
0572:  GOTO   569
0573:  MOVLW  89
0574:  MOVWF  04
0575:  MOVF   28,W
0576:  MOVWF  2D
0577:  MOVF   27,W
0578:  MOVWF  2C
0579:  MOVF   26,W
057A:  MOVWF  2B
057B:  MOVF   25,W
057C:  MOVWF  2A
057D:  MOVLW  02
057E:  MOVWF  2E
057F:  CALL   3CB
.................... delay_ms(1000); 
0580:  MOVLW  04
0581:  MOVWF  29
0582:  MOVLW  FA
0583:  MOVWF  38
0584:  CALL   028
0585:  DECFSZ 29,F
0586:  GOTO   582
.................... } 
0587:  GOTO   4E4
....................  
.................... } 
0588:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
